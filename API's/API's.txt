
*****
Note:
Make sure to include the following in your header in all fetching operations
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${Token}`,
    ‘Accept": "application/json, text-plain, */*’,
    'X-Requested-With": "XMLHttpRequest’
  }




Signup:
Endpoint: POST http://127.0.0.1:8000/api/signup
JSON Format:

{
    "name": "John Doe",
    "email": "john.doe@example.com",
    "password": "your_password_here",
    "password_confirmation": "your_password_here",
    "role_id": "1"
}







Login:
Endpoint: POST http://127.0.0.1:8000/api/login
JSON Format:
 {
             "email": "john.doe@example.com",
             "password": "your_password_here"
 }







Logout:
Endpoint: POST http://127.0.0.1:8000/api/logout
Header: Add an Authorization header with the value Bearer YOUR_ACCESS_TOKEN.

fetch('http://localhost:8000/api/logout', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${Token}`
  },
})



User:
 Retrieve all users
* GET http://127.0.0.1:8000/api/users

 Retrieve a specific user by ID
* GET http://127.0.0.1:8000/api/users/{user_id}

Delete a user by ID
* DELETE http://127.0.0.1:8000/api/users/{user_id}

Update a user by ID
* POST http://127.0.0.1:8000/api/users/{user_id}
JSON Format:
{
    "name": "Updated User",
    "email": "updated.user@example.com",
    "password": "updatedpassword",
    "image": “{file}”,
    "role_id": "1"
 }


* POST http://127.0.0.1:8000/api/users: Create a new user
JSON Format:
    {
      "name": "John Doe",
      "email": "john.doe@example.com",
      "password": "secret",
      "image": "user_images/john_doe.jpg”,
    "role_id": "1"

    }

Ex:// you can find another way to solve it
const formData = new FormData();
formData.append('name', 'John Doe');
formData.append('email', 'john@example.com');
formData.append('password', 'secret');
formData.append('image', imageFile); // Assuming imageFile is the selected file
axios.post('/api/users', formData, {
  headers: {
    'Content-Type': 'multipart/form-data',
	// the rest of the headers 
  },
})
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error(error);
  });







* 		List all subscriptions:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/subscriptions
* 		Create a new subscription:
    * Method: POST
    * Endpoint: http://127.0.0.1:8000/api/subscriptions
    * Request Payload: JSON data with name, duration, and optional cost fields.
* 		Get a specific subscription:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/subscriptions/{id} (Replace {id} with the subscription ID)
* 		Update a specific subscription:
    * Method: PUT or PATCH
    * Endpoint: http://127.0.0.1:8000/api/subscriptions/{id} (Replace {id} with the subscription ID)
    * Request Payload: JSON data with fields to update (name, duration, and optional cost).
* 		Delete a specific subscription:
    * Method: DELETE
    * Endpoint: http://127.0.0.1:8000/api/subscriptions/{id} (Replace {id} with the subscription ID)
JSON Format:
{
    "name": "wow",
    "duration": 30,
    "cost": 19.99
}





* 		List all cities:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/cities
* 		Create a new city:
    * Method: POST
    * Endpoint: http://127.0.0.1:8000/api/cities
    * Request Payload: JSON data with a name field.
* 		Get a specific city:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/cities/{id} (Replace {id} with the city ID)
* 		Update a specific city:
    * Method: PUT or PATCH
    * Endpoint: http://127.0.0.1:8000/api/cities/{id} (Replace {id} with the city ID)
    * Request Payload: JSON data with the name field to update.
* 		Delete a specific city:
    * Method: DELETE
    * Endpoint: http://127.0.0.1:8000/api/cities/{id} (Replace {id} with the city ID)
JSON Format:
{
    "name": "malek"
}



* 		List all specialties:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/specialties
* 		Create a new specialty:
    * Method: POST
    * Endpoint: http://127.0.0.1:8000/api/specialties
    * Request Payload: JSON data with a name field.
* 		Get a specific specialty:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/specialties/{id} (Replace {id} with the specialty ID)
* 		Update a specific specialty:
    * Method: PUT or PATCH
    * Endpoint: http://127.0.0.1:8000/api/specialties/{id} (Replace {id} with the specialty ID)
    * Request Payload: JSON data with the name field to update.
* 		Delete a specific specialty:
    * Method: DELETE
    * Endpoint: http://127.0.0.1:8000/api/specialties/{id} (Replace {id} with the specialty ID)
JSON Format:
{
    "name": "malek"
}





* 		List all reports:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/reports
* 		Create a new report:
    * Method: POST
    * Endpoint: http://127.0.0.1:8000/api/reports
    * Request Payload: JSON data with subject, message, and user_id fields.
* 		Get a specific report:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/reports/{id} (Replace {id} with the report ID)
* 		Update a specific report:
    * Request Payload: JSON data with subject, message, and user_id fields to update.
* 		Delete a specific report:
    * Method: DELETE
    * Endpoint: http://127.0.0.1:8000/api/reports/{id} (Replace {id} with the report ID)
JSON Format:
{
  "subject": "Test Report",
  "message": "This is a test report for endpoint testing.",
  "user_id": 2
}




http://127.0.0.1:8000


* 		List all artisans:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/artisans
* 		Get a specific artisan:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/artisans/{id} (Replace {id} with the artisan ID)
* 		Update a specific artisan:
    * Method: PUT or PATCH
    * Endpoint: http://127.0.0.1:8000/api/artisans/{id} (Replace {id} with the artisan ID)
    * Request Payload: JSON data with years_of_experience, jerny, formal_education, apprenticeships, association_memberships, user_id, and specialty_id fields to update.
ة
JSON Format:
{
  "years_of_experience": 5,
  "jerny": "Traveled to various countries for projects",
  "formal_education": "Bachelor's Degree in Construction Management",
  "apprenticeships": "Completed apprenticeship with a renowned carpenter",
  "association_memberships": "Member of the Artisan Guild",
  "user_id": 2,
  "specialty_id": 1,
“phone_number”:1234567891
}





* 		List all artisan cities:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/artisan-cities

* 		Get All cities for an artisan:
    * Method: GET
    * Endpoint: http://127.0.0.1:8000/api/artisan-cities/{id} (Replace {id} with the artisan ID)

* 		Create a new artisan city association:
    * Method: POST
    * Endpoint: http://127.0.0.1:8000/api/artisan-cities
    * Request Payload: JSON data with artisan_id and city_id fields.

* 		Delete a specific artisan city association:
    * Method: DELETE
    * Endpoint: /api/artisan-cities/{id} (Replace {id} with the artisan city association ID)
{
  "artisan_id": 1,
  "city_id": 1
}



* 		List all services:
    * Method: GET
    * Endpoint: /api/services
* 		Create a new service:
    * Method: POST
    * Endpoint: /api/services
    * Request Payload: Form data with name, image (file), estimated_time, pricing, and artisan_id fields.
* 		Get a specific service:
    * Method: GET
    * Endpoint: /api/services/{id} (Replace {id} with the service ID)
* 		Update a specific service:
    * Method: PUT or PATCH
    * Endpoint: /api/services/{id} (Replace {id} with the service ID)
    * Request Payload: Form data with name, image (file), estimated_time, pricing, and artisan_id fields to update.
* 		Delete a specific service:
    * Method: DELETE
    * Endpoint: /api/services/{id} (Replace {id} with the service ID)


{
  "name": "Service Name",
  "image": (file), // Attach an image file in the request
  "estimated_time": 120,
  "pricing": 49.99,
  "artisan_id": 1
}






* 		List all posts:
    * Method: GET
    * Endpoint: /api/posts
* 		Create a new post:
    * Method: POST
    * Endpoint: /api/posts
    * Request Payload: Form data with title, image (file), and service_id.
* 		Get a specific post:
    * Method: GET
    * Endpoint: /api/posts/{id} (Replace {id} with the post ID)
* 		Update a specific post:
    * Method: PUT or PATCH
    * Endpoint: /api/posts/{id} (Replace {id} with the post ID)
    * Request Payload: Form data with title, image (file), and service_id for updating.
* 		Delete a specific post:
    * Method: DELETE
    * Endpoint: /api/posts/{id} (Replace {id} with the post ID)
{
  "title": "Sample Post",
  "image": (attach an image file),
  "service_id": 1
}






* 		List all artisan subscriptions:
    * Method: GET
    * Endpoint: /api/artisan_subscriptions
* 		Create a new artisan subscription:
    * Method: POST
    * Endpoint: /api/artisan_subscriptions
    * Request Payload:
{
  "subscription_id": 1,  // Replace with a valid subscription ID
  "artisan_id": 1        // Replace with a valid artisan ID
}

* 		Get a specific artisan subscription:
    * Method: GET
    * Endpoint: /api/artisan_subscriptions/{id} (Replace {id} with the artisan subscription ID)
* 		Update a specific artisan subscription:
    * Method: PUT or PATCH
    * Endpoint: /api/artisan_subscriptions/{id} (Replace {id} with the artisan subscription ID)
{

  "subscription_id": 2,  // Replace with a valid subscription ID
  "artisan_id": 1        // Replace with a valid artisan ID
}
Delete a specific artisan subscription:
* Method: DELETE
* Endpoint: /api/artisan_subscriptions/{id} (Replace {id} with the artisan subscription ID)






GET http://localhost:8000/api/dashboard/overview
* 		Total Counts:
* 		Counts for Artisan Users:
* 		Counts for Artisan Posts:
* 		Counts for Artisan Subscriptions:







* 		List Subscription Histories:
    * Endpoint: GET http://127.0.0.1:8000/api/subscription-histories
    * Description: Get a list of all subscription histories.
    * Controller Method: index
* 		Create Subscription History:
    * Endpoint: POST http://127.0.0.1:8000/api/subscription-histories
    * Description: Create a new subscription history.
    * Controller Method: store
    * Request Body:

Show Subscription History:
* Endpoint: GET http://127.0.0.1:8000/api/subscription-histories/{id}
* Description: Get details of a specific subscription history by ID.
* Controller Method: show
{
  "subscription_id": 1,
  "artisan_id": 1
}






Roles
* GET /api/roles: Retrieve a list of all roles.

* PUT/PATCH http://127.0.0.1:8000/api/roles/{role}: Update a specific role.
{
  "name": "Administrator"
}


http://127.0.0.1:8000/storage/images/MawQbxZWWkVsG0LIMcpSUF6RrZ9CWGaAbHZfH3v9.jpg



Certification
Destroy (DELETE):
* Endpoint: http://127.0.0.1:8000/api/certifications/{id}
* Method: DELETE
* Description: Delete an existing certification by ID.
* Example Request:
Update (PUT/PATCH):
* Endpoint: http://127.0.0.1:8000/api/certifications/{id}
* Method: PUT or PATCH
* Description: Update an existing certification by ID.
* Example Request:
Store (POST):
* Endpoint: http://127.0.0.1:8000/api/certifications
* Method: POST
* Description: Store a new certification.
* Example Request:
Index (GET):
* Endpoint: http://127.0.0.1:8000/api/certifications
* Method: GET
* Description: Retrieve a listing of certifications with their associated artisans.
* Example Request:

{
    "name": "certifications",
    "artisan_id": 1
}



Attach city to artisan:
* Method: POST
* Endpoint: http://127.0.0.1:8000/api/attach-city/{artisan_id}/{city_id}
* Note: Replace 1 with the actual artisan_id and city_id values.
* 





Search:
* Method: POST
* Endpoint: http://127.0.0.1:8000/api/search
* Body (raw JSON):
{
  "SEARCHINPUT": "John"
}



Filter by city AND SPECIALIZATION:
* Method: POST
* Endpoint: http://127.0.0.1:8000/api/filter-city
* Body (raw JSON):
{
  "city_id": 1,
  "specialty_id": 2
}



filter And search artisans by city AND SPECIALIZATION:
* Method: POST
* Endpoint: http://127.0.0.1:8000/api/filterAndsearch
* Body (raw JSON):
{
  "SEARCHINPUT": "John”,
  "city_id": 1,
  "specialty_id": 2
}




update post image included 
method  POST.
Use form-data
 http://127.0.0.1:8000/api/posts/1 {   
    "title": "Updated Post",
    "service_id": 1,
    “image”:{file}
}




update service image included   
method POST
Use form-data ////                  
http://127.0.0.1:8000/api/services/1
{
    "name": "Updated Service",
    "estimated_time": 3,
    "pricing": 50.99,
    "artisan_id": 1,
    “image”:{file}
}


* Endpoint: DELETE /api/artisan-cities/{artisanId}/{cityId}
* Description: Delete a record from the artisan_cities table based on the artisan_id and city_id.
* 

GET ALL SPECIALUIES AND ALL CITIES
Method GET
 http://127.0.0.1:8000/api/getCitySpecialty 



* Endpoint: /api/getSubscriptionHistory
* Method: GET
* Functionality: This endpoint retrieves subscription history statistics. It calculates the count of artisan for each subscription and returns the results in JSON format.

* Endpoint: /api/recent-reports
* Method: GET
* Functionality: This endpoint retrieves the most recent reports from the reports table. limits the results to the top 5, and returns the data in JSON format.
